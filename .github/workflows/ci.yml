name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng
        sudo apt-get install -y poppler-utils
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Lint with flake8 (if available)
      run: |
        pip install flake8 || true
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true
    
    - name: Test with pytest
      run: |
        python test_cleanup.py
    
    - name: Test PDF processing functionality
      run: |
        # Create a minimal test
        python -c "
        import sys
        sys.path.append('.')
        from pdf_to_universal_xml import OCR_AVAILABLE, CAMELOT_AVAILABLE, TABULA_AVAILABLE
        print(f'OCR Available: {OCR_AVAILABLE}')
        print(f'Camelot Available: {CAMELOT_AVAILABLE}')
        print(f'Tabula Available: {TABULA_AVAILABLE}')
        print('Basic imports working correctly')
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security scanner
      run: |
        pip install safety bandit
    
    - name: Run safety check
      run: |
        pip install -r requirements.txt
        safety check || true
    
    - name: Run bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true

  docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify documentation
      run: |
        echo "✅ README.md exists: $(test -f README.md && echo 'Yes' || echo 'No')"
        echo "✅ LICENSE exists: $(test -f LICENSE && echo 'Yes' || echo 'No')"
        echo "✅ Requirements.txt exists: $(test -f requirements.txt && echo 'Yes' || echo 'No')"
        echo "✅ Main app exists: $(test -f app.py && echo 'Yes' || echo 'No')"
        echo "✅ Core module exists: $(test -f pdf_to_universal_xml.py && echo 'Yes' || echo 'No')"
        
        # Check if documentation is up to date
        if [ -f "WORKFLOW_ANALYSIS_REPORT.md" ]; then
          echo "✅ Workflow analysis available"
        fi
        
        if [ -f "MEMORY_OPTIMIZATION.md" ]; then
          echo "✅ Memory optimization docs available"
        fi
